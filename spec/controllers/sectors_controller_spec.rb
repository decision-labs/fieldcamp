require 'spec_helper'
require 'support/devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe SectorsController do

  def mock_sector(stubs={})
    @mock_sector ||= mock_model(Sector, stubs).as_null_object
  end

  def mock_admin_user(stubs={})
    @mock_admin_user ||= mock_model(User, stubs.merge(:role => 'admin'))
  end

  def mock_publisher_user(stubs={})
    @mock_publisher_user ||= mock_model(User, stubs.merge(:role => 'publisher'))
  end

  # test as publisher user
  describe "publisher user" do
    before(:each) do
      # sign_in mock_user
      request.env['warden'] = mock( Warden,
                                    :authenticate  => mock_publisher_user,
                                    :authenticate! => mock_publisher_user)
    end

    describe "GET index" do
      it "assigns all sectors as @sectors" do
        Sector.stub(:all).with(:include => :projects){[mock_sector]}
        get :index
        assigns(:sectors).should eq([mock_sector])
      end
    end

    describe "GET show" do
      it "assigns requested sector as @sector" do
        Sector.stub(:find).with('37', {:include => :projects}) {mock_sector}
        get :show, :id => '37'
        assigns(:sector).should be(mock_sector)
      end
    end

    describe "GET new" do
      it "raises CanCan::AccessDenied exception" do
        Sector.stub(:new){mock_sector}
        lambda{get :new}.should
          raise_exception(CanCan::AccessDenied)
      end
    end

    describe "GET edit" do
      it "raises CanCan::AccessDenied exception" do
        Sector.stub(:find).with('37'){ mock_sector }
        lambda{get :edit, :id => '37' }.should raise_exception(CanCan::AccessDenied)
      end
    end

    describe "PUT update" do
      it "raises CanCan::AccessDenied exception" do
        Sector.stub(:find).with("37") { mock_sector }
        params = {'these' => 'params'}
        lambda{ put :update, :id => "37", :sector => params }.should raise_exception(CanCan::AccessDenied)
      end
    end

    describe "POST create" do
      it "raises CanCan::AccessDenied exception" do
        Sector.stub(:new){mock_sector}
        params = {:name => 'test'}
        lambda{post :create, :sector => params }.should raise_exception(CanCan::AccessDenied)
      end
    end

    describe "DELETE destroy" do
      it "raises CanCan::AccessDenied exception" do
        Sector.stub(:find).with("37") { mock_sector }
        lambda{delete :destroy, :id => "37"}.should raise_exception(CanCan::AccessDenied)
      end
    end

  end

  # test as admin user

  describe "admin user" do
    before(:each) do
      # sign_in mock_user
      request.env['warden'] = mock( Warden,
                                    :authenticate  => mock_admin_user,
                                    :authenticate! => mock_admin_user)
    end

    describe "GET index" do
      it "assigns all sectors as @sectors" do
        Sector.stub(:all).with(:include => :projects){[mock_sector]}
        get :index
        assigns(:sectors).should eq([mock_sector])
      end
    end

    describe "GET show" do
      it "assigns requested sector as @sector" do
        Sector.stub(:find).with('37', {:include => :projects}) {mock_sector}
        get :show, :id => '37'
        assigns(:sector).should be(mock_sector)
      end
    end

    describe "GET new" do
      it "assigns a new sector as @sector" do
        Sector.stub(:new) { mock_sector }
        get :new
        assigns(:sector).should be(mock_sector)
      end
    end

    describe "GET edit" do
      it "assigns the requested sector as @sector" do
        Sector.stub(:find).with("37") { mock_sector }
        get :edit, :id => "37"
        assigns(:sector).should be(mock_sector)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "assigns a newly created sector as @sector" do
          Sector.stub(:new).with({'these' => 'params'}) { mock_sector(:save => true) }
          post :create, :sector => {'these' => 'params'}
          assigns(:sector).should be(mock_sector)
        end

        it "redirects to the created sector" do
          Sector.stub(:new) { mock_sector(:save => true) }
          post :create, :sector => {}
          response.should redirect_to(sector_url(mock_sector))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved sector as @sector" do
          Sector.stub(:new).with({'these' => 'params'}) { mock_sector(:save => false) }
          post :create, :sector => {'these' => 'params'}
          assigns(:sector).should be(mock_sector)
        end

        it "re-renders the 'new' template" do
          Sector.stub(:new) { mock_sector(:save => false) }
          post :create, :sector => {}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested sector" do
          Sector.stub(:find).with("37") { mock_sector }
          mock_sector.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, :id => "37", :sector => {'these' => 'params'}
        end

        it "assigns the requested sector as @sector" do
          Sector.stub(:find) { mock_sector(:update_attributes => true) }
          put :update, :id => "1"
          assigns(:sector).should be(mock_sector)
        end

        it "redirects to the sector" do
          Sector.stub(:find) { mock_sector(:update_attributes => true) }
          put :update, :id => "1"
          response.should redirect_to(sector_url(mock_sector))
        end
      end

      describe "with invalid params" do
        it "assigns the sector as @sector" do
          Sector.stub(:find) { mock_sector(:update_attributes => false) }
          put :update, :id => "1"
          assigns(:sector).should be(mock_sector)
        end

        it "re-renders the 'edit' template" do
          Sector.stub(:find) { mock_sector(:update_attributes => false) }
          put :update, :id => "1"
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested sector" do
        Sector.stub(:find).with("37") { mock_sector }
        mock_sector.should_receive(:destroy)
        delete :destroy, :id => "37"
      end

      it "redirects to the sectors list" do
        Sector.stub(:find) { mock_sector }
        delete :destroy, :id => "1"
        response.should redirect_to(sectors_url)
      end
    end

  end # admin user


end


